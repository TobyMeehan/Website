@using AutoMapper
@using BlazorUI.Extensions
@using DataAccessLibrary.Models
@using DataAccessLibrary.Data

@page "/downloads/{Id}"

@inject IDownloadProcessor downloadProcessor
@inject IMapper mapper
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager

@if (_download == null)
{
    <Title Value="Downloads"></Title>
    <LoadingMessage Text="true" />
}
else
{
    <Title Value="@_download.Title"></Title>

    <h1>@_download.Title</h1>

    @((MarkupString)_download.LongDescription)

    <AuthorizeView Policy="@Authorization.Policies.IsAdmin">
        <Authorized>
            <div class="card border-dark mb-2">
                <div class="card-body">
                    <EditForm Model="_download" OnSubmit="Verify" Context="formContext" class="form-inline">
                        <label class="my-1 mr-sm-2"><i class="fas fa-user-shield mr-1"></i> Set verification:</label>
                        <InputSelect @bind-Value="@_download.Verified" class="custom-select my-1 mr-sm-2">
                            <option value="@(DownloadVerification.None)">None</option>
                            <option value="@(DownloadVerification.Verified)">Verified</option>
                            <option value="@(DownloadVerification.Dangerous)">Dangerous</option>
                        </InputSelect>
                        <button type="submit" class="btn btn-dark">Submit</button>
                    </EditForm>
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
            @switch (_download.Verified)
            {
                case DataAccessLibrary.Models.DownloadVerification.Dangerous:
                    <div class="card border-danger mb-2">
                        <div class="card-body text-danger">
                            <i class="fas fa-exclamation"></i>
                            This download has been marked as dangerous and could potentially cause damage to your computer.
                        </div>
                    </div>
                    break;
                case DataAccessLibrary.Models.DownloadVerification.Verified:
                    <div class="card border-success mb-2">
                        <div class="card-body text-success">
                            <i class="fas fa-check"></i>
                            This download is verified and safe to use on your computer.
                        </div>
                    </div>
                    break;
                default:
                    break;
            }

        </NotAuthorized>
    </AuthorizeView>

    @if (_download.Updated != null)
    {
        <p class="text-muted font-weight-light">Last updated @_download.Updated.Value.Day @_download.Updated.Value.ToString("MMMM") @_download.Updated.Value.Year</p>
    }

    <button type="button" class="btn btn-primary my-2" data-toggle="modal" data-target="#FilesModal"><i class="fas fa-download"></i> Download</button>

    <p>
        <a href="/downloads"><i class="fas fa-angle-left"></i> Back to List</a>

        <AuthorizeView Resource="_download" Policy="@Authorization.Policies.EditDownload">
            <DownloadLink Id="@_download.Id" Action="DownloadLink.ActionType.Edit"><i class="fas fa-edit"></i> Edit</DownloadLink>
            <DownloadLink Id="@_download.Id" Action="DownloadLink.ActionType.Files"><i class="far fa-folder-open"></i> File Manager</DownloadLink>
            <DownloadLink Id="@_download.Id" Action="DownloadLink.ActionType.Authors"><i class="fas fa-users-cog"></i> Authors</DownloadLink>
            <DownloadLink Id="@_download.Id" Action="DownloadLink.ActionType.Delete"><i class="fas fa-trash"></i> Delete</DownloadLink>
        </AuthorizeView>
    </p>

    <div class="modal fade" id="FilesModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Download @_download.Title</h4>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>

                <div class="modal-body">
                    <ul>
                        @foreach (var item in _download.Files)
                        {
                            <li>
                                <a href="@($"https://downloads.tobymeehan.com/{Id}/{item}")">@item</a>
                                <FileIcon Filename="@item" />
                            </li>
                        }
                    </ul>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string Id { get; set; }

    private Models.Download _download;

    protected override async Task OnInitializedAsync()
    {
        _download = await Task.Run(async () => mapper.Map<Models.Download>(await downloadProcessor.GetDownloadById(Id)));
    }

    async Task Verify()
    {
        await downloadProcessor.VerifyDownload(_download.Id, _download.Verified);
    }
}
