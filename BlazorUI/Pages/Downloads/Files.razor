@using AutoMapper;
@using DataAccessLibrary.Data;

@page "/downloads/{Id}/files"
@layout EditLayout

@inject IMapper mapper
@inject IDownloadProcessor downloadProcessor
@inject EditDownloadState state

@if (_download == null)
{
    <div class="d-flex justify-content-center">
        <strong>Loading...</strong>
        <div class="spinner-border ml-auto" role="status"></div>
    </div>
}
else
{
    <AuthorizeView Resource="_download" Policy="@Authorization.Policies.EditDownload">
        <Authorized>
            <div class="custom-file mb-3">
                <EditForm Model="_download" Context="formContext">
                    <InputFile id="FileUpload" class="custom-file-input" OnChange="UploadFile" />
                    <label class="custom-file-label" for="FileUpload"><i class="fas fa-upload"></i> Upload file (200MB)</label>
                </EditForm>
            </div>

            <table class="table table-hover table-sm">
                <tbody>
                    @foreach (string file in _download.Files)
                    {
                        <tr>
                            <td>
                                <FileIcon Filename="@file" />
                            </td>
                            <td>
                                <a class="my-auto" href="@($"https://downloads.tobymeehan.com/{Id}/{file}")">@file</a>
                            </td>
                            <td>
                                <button class="btn btn-sm btn-outline-danger" @onclick="@(e => DeleteFile(file))">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </Authorized>
        <NotAuthorized>
            <Redirect Path="/downloads" />
        </NotAuthorized>
    </AuthorizeView>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private Models.Download _download;

    protected override async Task OnInitializedAsync()
    {
        _download = await Task.Run(async () => mapper.Map<Models.Download>(await downloadProcessor.GetDownloadById(Id)));

        state.Title = _download.Title;
        state.Id = _download.Id;
    }

    async Task UploadFile(IFileListEntry[] files)
    {
        const int maxSize = 209715200; // 200MB
        var file = files.FirstOrDefault();
        byte[] contents = (await file.ReadAllAsync(maxSize)).ToArray();
        await downloadProcessor.CreateFile(new DataAccessLibrary.Models.DownloadFileModel { DownloadId = _download.Id, Filename = file.Name }, contents);

        _download.Files.Add(file.Name);
    }

    async Task DeleteFile(string filename)
    {
        await downloadProcessor.DeleteFile(new DataAccessLibrary.Models.DownloadFileModel { DownloadId = _download.Id, Filename = filename });
        _download.Files.Remove(filename);
    }
}
