@using AutoMapper
@using BlazorUI.Extensions
@using DataAccessLibrary.Data

@page "/downloads/{Id}/edit"

@inject IDownloadProcessor downloadProcessor
@inject IMapper mapper
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager

@if (_download == null)
{
    <div class="d-flex justify-content-center">
        <strong>Loading...</strong>
        <div class="spinner-border ml-auto" role="status"></div>
    </div>
}
else
{
    <AuthorizeView Resource="_download" Policy="EditDownloadPolicy">
        <Authorized>
            <h1>
                Edit
                <small class="text-muted">@_download.Title</small>
            </h1>

            <EditForm Model="_form" Context="formContext" OnValidSubmit="Submit">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label for="Title">Title</label>
                    <div class="col-md-10">
                        <InputText id="Title" @bind-Value="_form.Title" class="form-control" />
                        <ValidationMessage For="@(() => _form.Title)" />
                    </div>
                </div>

                <div class="form-group">
                    <label for="ShortDescription">Short Description</label>
                    <div class="col-md-10">
                        <InputText id="ShortDescription" @bind-Value="_form.ShortDescription" class="form-control" />
                        <ValidationMessage For="@(() => _form.ShortDescription)" />
                    </div>
                </div>

                <div class="form-group">
                    <label for="LongDescription">Long Description</label>
                    <div class="col-md-10">
                        <InputRichText Id="LongDescription" @bind-Value="_form.LongDescription" />
                        <ValidationMessage For="@(() => _form.LongDescription)" />
                    </div>
                </div>

                <div class="form-group">
                    <button type="submit" class="btn btn-dark">Save</button>
                </div>
            </EditForm>

            <p>
                <a href="/downloads">Back to List</a>
                <a href="/downloads/@Id/files">File Manager</a>
                <a href="/downloads/@Id/delete">Delete</a>
            </p>
        </Authorized>
        <NotAuthorized>
            <Redirect Path="/downloads" />
        </NotAuthorized>
    </AuthorizeView>
}

@code {
    [Parameter] public string Id { get; set; }

    private Models.Download _download;

    private Models.DownloadFormModel _form = new Models.DownloadFormModel();

    private AuthenticationState _context;

    protected override async Task OnInitializedAsync()
    {
        _context = await authenticationStateProvider.GetAuthenticationStateAsync();
        _download = await Task.Run(async () => mapper.Map<Models.Download>(await downloadProcessor.GetDownloadById(Id)));
        _form = await Task.Run(() => mapper.Map<Models.DownloadFormModel>(_download));
    }

    async Task Submit()
    {
        var download = new Models.Download
        {
            Id = _download.Id,
            Title = _form.Title,
            ShortDescription = _form.ShortDescription,
            LongDescription = _form.LongDescription,
            CreatorId = _context.User.GetUserId()
        };

        await downloadProcessor.UpdateDownload(mapper.Map<DataAccessLibrary.Models.Download>(download));

        navigationManager.NavigateTo($"/downloads/{download.Id}");
    }
}
