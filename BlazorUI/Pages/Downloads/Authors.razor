@using AutoMapper
@using BlazorUI.Extensions
@using DataAccessLibrary.Data

@page "/downloads/{Id}/authors"
@layout EditLayout

@inject IDownloadProcessor downloadProcessor
@inject IUserProcessor userProcessor
@inject IMapper mapper
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authenticationStateProvider
@inject EditDownloadState state

@if (_download == null)
{
    <LoadingMessage Text="true" />
}
else
{
    <AuthorizeView Resource="_download" Policy="@Authorization.Policies.EditDownload">
        <Authorized>
            <div class="row">
                <div class="col-md-6">
                    <div class="card my-3">
                        <div class="card-body">
                            <h2>Add Authors</h2>

                            <EditForm Model="_username" OnSubmit="AddUser" Context="formContext">
                                <div class="input-group mb-3">
                                    <InputText id="UserSearch" class="form-control" @bind-Value="_username.Username" @onchange="SelectUser" />
                                    <div class="input-group-append">
                                        <button type="submit" class="btn btn-outline-primary">
                                            <i class="fas fa-user-plus"></i>
                                            Invite
                                        </button>
                                    </div>
                                </div>
                            </EditForm>

                            <ul class="list-group list-group-flush">
                                @foreach (Models.User user in _users)
                                {
                                    <li class="list-group-item">
                                        <a href="#" role="button" @onclick="() => SelectUser(user)">@user.Username</a>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card my-3">
                        <div class="card-body">
                            <h2>Manage Authors</h2>
                            <ul class="list-group list-group-flush mb-3">
                                @foreach (Models.User author in _download.Authors)
                                {
                                    if (author.Id == _download.CreatorId)
                                    {
                                        <li class="list-group-item list-group-item-primary d-flex justify-content-between">
                                            <span class="my-auto"><DisplayUser Username="@author.Username" /></span>
                                            <button class="btn btn-danger disabled"><i class="fas fa-user-minus"></i> Remove</button>
                                        </li>
                                    }
                                    else if (author.Id == _context.User.GetUserId())
                                    {
                                        <li class="list-group-item list-group-item-secondary d-flex justify-content-between">
                                            <span class="my-auto"><DisplayUser Username="@author.Username" /></span>
                                            <button class="btn btn-secondary" @onclick="() => RemoveUser(author)"><i class="fas fa-user-slash"></i> Leave</button>
                                        </li>
                                    }
                                    else
                                    {
                                        <li class="list-group-item d-flex justify-content-between">
                                            <span class="my-auto"><DisplayUser Username="@author.Username" /></span>
                                            <button class="btn btn-danger"><i class="fas fa-user-minus"></i> Remove</button>
                                        </li>
                                    }
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
            <Redirect Path="/downloads" />
        </NotAuthorized>
    </AuthorizeView>
}

@code {
    [Parameter] public string Id { get; set; }

    private Models.UsernameFormModel _username = new Models.UsernameFormModel();

    private Models.Download _download;
    private List<Models.User> _users;
    private Models.User _selectedUser;

    private AuthenticationState _context;

    protected override async Task OnInitializedAsync()
    {
        _context = await authenticationStateProvider.GetAuthenticationStateAsync();
        _download = await Task.Run(async () => mapper.Map<Models.Download>(await downloadProcessor.GetDownloadById(Id)));
        _users = await Task.Run(async () => mapper.Map<List<Models.User>>(await userProcessor.GetUsersByRole("Verified")));
        _users = await Task.Run(() => _users.Where(filter => !(_download.Authors.Any(user => user.Id == filter.Id))).ToList());

        state.Title = _download.Title;
        state.Id = _download.Id;
    }

    void SelectUser(Models.User user)
    {
        _selectedUser = user;
        _username.Username = user.Username;
    }

    void SelectUser(string username)
    {
        _selectedUser = _users.Single(filter => filter.Username == username) ?? _selectedUser;
    }

    void SelectUser()
    {
        SelectUser(_username.Username);
    }

    async Task AddUser()
    {
        if (_selectedUser != null)
        {
            await downloadProcessor.AddAuthor(_download.Id, _selectedUser.Id);
            _download.Authors.Add(_selectedUser);
            _users.Remove(_selectedUser);
        }
    }

    async Task RemoveUser(Models.User user)
    {
        await downloadProcessor.RemoveAuthor(_download.Id, user.Id);
        _download.Authors.Remove(user);
        _users.Add(user);
    }
}
