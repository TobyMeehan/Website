// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TobyMeehan.Com.Data.DataAccess;

#nullable disable

namespace TobyMeehan.Com.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241217222043_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TobyMeehan.Com.Data.Models.CommentDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("edited_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_comments");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_comments_user_id");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("TobyMeehan.Com.Data.Models.DownloadAuthorDto", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("DownloadId")
                        .HasColumnType("uuid")
                        .HasColumnName("download_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.HasKey("UserId", "DownloadId")
                        .HasName("pk_authors");

                    b.HasIndex("DownloadId")
                        .HasDatabaseName("ix_authors_download_id");

                    b.ToTable("authors", (string)null);
                });

            modelBuilder.Entity("TobyMeehan.Com.Data.Models.DownloadCommentDto", b =>
                {
                    b.Property<Guid>("DownloadId")
                        .HasColumnType("uuid")
                        .HasColumnName("download_id");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uuid")
                        .HasColumnName("comment_id");

                    b.HasKey("DownloadId", "CommentId")
                        .HasName("pk_download_comments");

                    b.HasIndex("CommentId")
                        .IsUnique()
                        .HasDatabaseName("ix_download_comments_comment_id");

                    b.ToTable("download_comments", (string)null);
                });

            modelBuilder.Entity("TobyMeehan.Com.Data.Models.DownloadDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("description");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("public_id");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("summary");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("Verification")
                        .HasColumnType("integer")
                        .HasColumnName("verification");

                    b.Property<string>("Version")
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.Property<int>("Visibility")
                        .HasColumnType("integer")
                        .HasColumnName("visibility");

                    b.HasKey("Id")
                        .HasName("pk_downloads");

                    b.ToTable("downloads", (string)null);
                });

            modelBuilder.Entity("TobyMeehan.Com.Data.Models.DownloadFileDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("content_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DownloadId")
                        .HasColumnType("uuid")
                        .HasColumnName("download_id");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("filename");

                    b.Property<long>("SizeInBytes")
                        .HasColumnType("bigint")
                        .HasColumnName("size_in_bytes");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("Visibility")
                        .HasColumnType("integer")
                        .HasColumnName("visibility");

                    b.HasKey("Id")
                        .HasName("pk_files");

                    b.HasIndex("DownloadId")
                        .HasDatabaseName("ix_files_download_id");

                    b.HasIndex("Filename")
                        .HasDatabaseName("ix_files_filename");

                    b.ToTable("files", (string)null);
                });

            modelBuilder.Entity("TobyMeehan.Com.Data.Models.FileDownloadDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid")
                        .HasColumnName("file_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_file_downloads");

                    b.HasIndex("FileId")
                        .HasDatabaseName("ix_file_downloads_file_id");

                    b.ToTable("file_downloads", (string)null);
                });

            modelBuilder.Entity("TobyMeehan.Com.Data.Models.ReplyDto", b =>
                {
                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<Guid>("ReplyId")
                        .HasColumnType("uuid")
                        .HasColumnName("reply_id");

                    b.HasKey("ParentId", "ReplyId")
                        .HasName("pk_replies");

                    b.HasIndex("ReplyId")
                        .IsUnique()
                        .HasDatabaseName("ix_replies_reply_id");

                    b.ToTable("replies", (string)null);
                });

            modelBuilder.Entity("TobyMeehan.Com.Data.Models.DownloadAuthorDto", b =>
                {
                    b.HasOne("TobyMeehan.Com.Data.Models.DownloadDto", "Download")
                        .WithMany("Authors")
                        .HasForeignKey("DownloadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_authors_downloads_download_id");

                    b.Navigation("Download");
                });

            modelBuilder.Entity("TobyMeehan.Com.Data.Models.DownloadCommentDto", b =>
                {
                    b.HasOne("TobyMeehan.Com.Data.Models.CommentDto", "Comment")
                        .WithOne("Download")
                        .HasForeignKey("TobyMeehan.Com.Data.Models.DownloadCommentDto", "CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_download_comments_comments_comment_id");

                    b.HasOne("TobyMeehan.Com.Data.Models.DownloadDto", "Download")
                        .WithMany("Comments")
                        .HasForeignKey("DownloadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_download_comments_downloads_download_id");

                    b.Navigation("Comment");

                    b.Navigation("Download");
                });

            modelBuilder.Entity("TobyMeehan.Com.Data.Models.DownloadFileDto", b =>
                {
                    b.HasOne("TobyMeehan.Com.Data.Models.DownloadDto", "Download")
                        .WithMany("Files")
                        .HasForeignKey("DownloadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_files_downloads_download_id");

                    b.Navigation("Download");
                });

            modelBuilder.Entity("TobyMeehan.Com.Data.Models.FileDownloadDto", b =>
                {
                    b.HasOne("TobyMeehan.Com.Data.Models.DownloadFileDto", "File")
                        .WithMany("Downloads")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_file_downloads_files_file_id");

                    b.Navigation("File");
                });

            modelBuilder.Entity("TobyMeehan.Com.Data.Models.ReplyDto", b =>
                {
                    b.HasOne("TobyMeehan.Com.Data.Models.CommentDto", "Parent")
                        .WithMany("Replies")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_replies_comments_parent_id");

                    b.HasOne("TobyMeehan.Com.Data.Models.CommentDto", "Reply")
                        .WithOne("Parent")
                        .HasForeignKey("TobyMeehan.Com.Data.Models.ReplyDto", "ReplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_replies_comments_reply_id");

                    b.Navigation("Parent");

                    b.Navigation("Reply");
                });

            modelBuilder.Entity("TobyMeehan.Com.Data.Models.CommentDto", b =>
                {
                    b.Navigation("Download");

                    b.Navigation("Parent");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("TobyMeehan.Com.Data.Models.DownloadDto", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Comments");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("TobyMeehan.Com.Data.Models.DownloadFileDto", b =>
                {
                    b.Navigation("Downloads");
                });
#pragma warning restore 612, 618
        }
    }
}
