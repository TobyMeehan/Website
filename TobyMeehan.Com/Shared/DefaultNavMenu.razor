@inject NavigationManager navigation

<nav class="navbar navbar-expand-lg navbar-dark bg-darker fixed-top" style="min-height: 56px;">
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target=".navbar-collapse">
        <span class="navbar-toggler-icon"></span>
    </button>

    <div class="navbar-nav navbar-centre">
        <a class="navbar-brand" href="https://tobymeehan.com">
            <span class="text-logo h3">Toby Meehan</span>
        </a>
    </div>

    <div class="navbar-collapse collapse">
        <ul class="navbar-nav">
            <li class="nav-item">
                <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">Home</NavLink>
            </li>
            <li class="nav-item">
                <NavLink class="nav-link" href="/downloads" Match="NavLinkMatch.Prefix">Downloads</NavLink>
            </li>
            <AuthorizeView>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/developer" Match="NavLinkMatch.Prefix">Developer</NavLink>
                </li>
            </AuthorizeView>
            <li class="nav-item">
                <NavLink class="nav-link" href="https://github.com/TobyMeehan/Website">GitHub</NavLink>
            </li>
            <AuthorizeView Policy="@AuthorizationPolicies.IsAdmin">
                <li class="nav-item">
                    <NavLink class="nav-link" href="/admin" Match="NavLinkMatch.All">Admin</NavLink>
                </li>
            </AuthorizeView>
        </ul>

        <div class="navbar-nav ml-auto">
            <div class="form-inline">
                <AuthorizeView>
                    <Authorized>
                        <div class="btn-group">
                            <a class="btn btn-outline-light" href="/me">
                                @if (_user != null)
                                {
                                    <Username User="_user"></Username>
                                }
                            </a>
                            <button type="button" class="btn btn-outline-light dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <span class="sr-only">Toggle Dropdown</span>
                            </button>
                            <div class="dropdown-menu">
                                <a class="dropdown-item" href="/logout" @onclick="Logout" @onclick:preventDefault>
                                    <i class="fas fa-sign-out-alt"></i>
                                    Logout
                                </a>
                            </div>
                        </div>
                    </Authorized>
                    <NotAuthorized>
                        <a class="btn btn-outline-light" href="/login" @onclick="Login" @onclick:preventDefault>
                            <i class="fas fa-sign-in-alt"></i>
                            Login
                        </a>
                    </NotAuthorized>
                </AuthorizeView>
            </div>
        </div>
    </div>

</nav>

@inject IUserRepository users

@code {
    [CascadingParameter] public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private AuthenticationState _context;
    private User _user;

    protected override async Task OnInitializedAsync()
    {
        _context = await AuthenticationStateTask;

        if (_context.User.Identity.IsAuthenticated)
        {
            _user = await users.GetByIdAsync(_context.User.Id());
        }
    }

    private void Login() => navigation.NavigateToLogin();

    private void Logout() => navigation.NavigateToLogout();
}