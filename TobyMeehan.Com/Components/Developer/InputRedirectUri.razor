@inherits InputBase<string>

<div class="input-group" @attributes="AdditionalAttributes">
    <InputSelect class="custom-select col-2" @bind-Value="_scheme">
        <option selected="@(_scheme == "https")" value="https">https://</option>
        <option selected="@(_scheme == "http")" value="http">http://</option>
    </InputSelect>
    <InputText class="form-control" @bind-Value="_path" placeholder="example.com/callback" />
</div>

@code {
    private string _scheme
    {
        get => _currentUri?.Scheme ?? "https";
        set => _currentUri = new Uri($"{value}://{_path}");
    }

    private string _path
    {
        get => $"{_currentUri?.Authority}{_currentUri?.AbsolutePath}" ?? CurrentValue;
        set
        {
            if (string.IsNullOrWhiteSpace(value))
            {
                CurrentValue = "";
            }
            else
            {
                _currentUri = new Uri($"{_scheme}://{value}");
            }
        }
    }

    private Uri _currentUri
    {
        get
        {
            if (Uri.TryCreate(CurrentValue, UriKind.Absolute, out Uri uri))
            {
                return uri;
            }

            return null;
        }
        set
        {
            CurrentValue = value.AbsoluteUri;
        }
    }

    protected override bool TryParseValueFromString(string value, out string result, out string validationErrorMessage)
    {
        validationErrorMessage = "Invalid URL format.";

        bool success = Uri.TryCreate(value, UriKind.Absolute, out Uri uri);
        result = uri?.AbsoluteUri ?? value;

        return success;
    }
}
