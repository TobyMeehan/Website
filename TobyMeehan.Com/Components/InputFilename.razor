@inherits InputBase<string>

<div class="input-group">
    <InputText class="form-control" @bind-Value="_baseName" />

    @if (_extension.Any())
    {
        <div class="input-group-append">
            <span class="input-group-text">.@_extension</span>
        </div>
    }

</div>

@code {
    private string _baseName
    {
        get
        {
            if (!_extension.Any())
            {
                return CurrentValue;
            }

            return string.Join(".", CurrentValue.Split(".").SkipLast(1));
        }

        set
        {
            if (_extension.Any())
            {
                CurrentValueAsString = $"{value}.{_extension}";
            }
            else
            {
                CurrentValueAsString = value;
            }
        }
    }

    private string _extension
    {
        get
        {
            if (!CurrentValue.Contains("."))
            {
                return "";
            }

            return CurrentValue.Split(".").Last();
        }
    }

    protected override bool TryParseValueFromString(string value, out string result, out string validationErrorMessage)
    {
        result = value;
        validationErrorMessage = "";

        List<char> invalidChars = System.IO.Path.GetInvalidFileNameChars().Intersect(value).ToList();

        if (string.IsNullOrWhiteSpace(value))
        {
            validationErrorMessage = "There's nothing there...";
            return false;
        }

        if (value.EndsWith("."))
        {
            validationErrorMessage = "Don't worry about the dots, I've got that covered.";
        }

        if (invalidChars.Any())
        {
            validationErrorMessage = $"Filename contains some of the cursed characters ({string.Join(",", invalidChars)}).";
            return false;
        }

        return true;
    }
}
