<AuthorizeView>
    <Authorized>
        <div class="btn-group">
            <a class="btn btn-outline-light" href="/me">
                @if (_user != null)
                {
                    <Username User="_user"></Username>
                }
            </a>
            <button type="button" class="btn btn-outline-light dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <span class="sr-only">Toggle Dropdown</span>
            </button>
            <div class="dropdown-menu">
                <a class="dropdown-item" href="/users">
                    <i class="fas fa-users"></i>
                    Users
                </a>
                <a class="dropdown-item" href="/logout" @onclick="Logout" @onclick:preventDefault>
                    <i class="fas fa-sign-out-alt"></i>
                    Logout
                </a>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <a class="btn btn-outline-light" href="/login" @onclick="Login" @onclick:preventDefault>
            <i class="fas fa-sign-in-alt"></i>
            Login
        </a>
    </NotAuthorized>
</AuthorizeView>

@inject IUserRepository users
@inject NavigationManager navigation

@code {
    [CascadingParameter] public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private AuthenticationState _context;
    private User _user;

    protected override async Task OnInitializedAsync()
    {
        _context = await AuthenticationStateTask;

        if (_context.User.Identity.IsAuthenticated)
        {
            _user = await users.GetByIdAsync(_context.User.Id());
        }
    }

    private void Login() => navigation.NavigateToLogin();

    private void Logout() => navigation.NavigateToLogout();
}