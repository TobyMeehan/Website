@inherits AttributableComponentBase
@typeparam T

@ChildContent(Items.ElementAt(_index))

<nav>
    <ul class="pagination @CssClass">
        <li class="page-item @(!_canNavigatePrevious ? "disabled":"")">
            <a class="page-link" href="#" aria-label="Previous" @onclick="NavigatePrevious" @onclick:preventDefault>
                <i class="fas fa-chevron-left"></i>
            </a>
        </li>

        @foreach (var item in _pages)
        {
            int index = Items.IndexOf(item);

            <li class="page-item @(index == _index ? "active":"")">
                <a class="page-link" href="#" @onclick="() => Navigate(index)" @onclick:preventDefault>
                    @(index + 1)
                </a>
            </li>
        }

        <li class="page-item @(!_canNavigateNext ? "disabled":"")">
            <a class="page-link" href="#" aria-label="Next" @onclick="NavigateNext" @onclick:preventDefault>
                <i class="fas fa-chevron-right"></i>
            </a>
        </li>
    </ul>
</nav>

@code {
    [Parameter] public RenderFragment<T> ChildContent { get; set; }

    [Parameter] public IEnumerable<T> Items { get; set; }

    [Parameter] public int Range { get; set; }

    private int _index;

    private IEnumerable<T> _pages
    {
        get
        {
            int lower = _index - Range;
            int higher = _index + Range;

            if (lower < 0)
            {
                higher += lower * -1;
                lower = 0;
            }

            if (higher >= Items.Count())
            {
                lower -= higher - Items.Count();
                higher = Items.Count() - 1;
            }

            if (lower < 0)
            {
                lower = 0;
            }


            for (int i = lower; i <= higher; i++)
            {
                yield return Items.ElementAt(i);
            }
        }
    }

    private bool _canNavigatePrevious => _index - 1 >= 0;
    private void NavigatePrevious()
    {
        if (!_canNavigatePrevious)
        {
            return;
        }

        _index--;
    }

    private void Navigate(int index)
    {
        if (index < 0 || index >= Items.Count())
        {
            return;
        }

        _index = index;
    }

    private bool _canNavigateNext => _index + 1 < Items.Count();
    private void NavigateNext()
    {
        if (!_canNavigateNext)
        {
            return;
        }

        _index++;
    }
}
